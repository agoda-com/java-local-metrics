name: Java CI with Gradle and JReleaser

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 11
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'adopt'
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Release with JReleaser
#        env:
#          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          ORG_GRADLE_PROJECT_signingPublicKey: ${{ secrets.GPG_PUBLIC_KEY }}
#          ORG_GRADLE_PROJECT_signingSecretKey: ${{ secrets.GPG_SECRET_KEY }}
#          JRELEASER_NEXUS2_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
#        run: ./gradlew jreleaserRelease --stacktrace
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Configure build steps as you'd normally do

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'adopt'
#          server-id: central
#          server-username: MAVEN_USERNAME
#          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Build
        run: ./gradlew build test assemble

      # Post JARs to Maven Central

#      - name: Release to Maven Central
#        env:
#          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
#          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#        run: |
#          export GPG_TTY=$(tty)
#          git config user.name "${{ github.event.head_commit.committer.name }}"
#          git config user.email "${{ github.event.head_commit.committer.email }}"
#          mvn -B --file pom.xml release:prepare release:perform

      # Create a release

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Persist logs

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties