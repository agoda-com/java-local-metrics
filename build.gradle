plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.5.0'
}

group = 'io.agodadev'
version = '0.1.1'
description = 'A library for measuring and improving developer experience on local workstations'

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'junit:junit:4.12'
    implementation 'org.mockito:mockito-core:4.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

// Define the correct staging directory
def stagingDirectory = layout.buildDirectory.dir("staging-deploy")

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'TestMetrics'
                description = project.description
                url = 'https://github.com/yourusername/testmetrics'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yourusername'
                        name = 'Your Name'
                        email = 'your.email@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/yourusername/testmetrics.git'
                    developerConnection = 'scm:git:ssh://github.com/yourusername/testmetrics.git'
                    url = 'https://github.com/yourusername/testmetrics/tree/main'
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
    sign publishing.publications.mavenJava
}

// Task to prepare the staging directory with artifacts
tasks.register('prepareStaging') {
    doLast {
        def stagingDir = file(stagingDirectory.get().asFile)
        if (!stagingDir.exists()) {
            stagingDir.mkdirs()
        }
        // Copy artifacts (JARs, POMs, etc.) to the staging directory
        copy {
            from("$buildDir/libs") // assuming your artifacts are in 'libs'
            into(stagingDir)
            include('**/*.jar', '**/*.pom')
        }
    }
}

// Task to ensure the JReleaser output directory exists
tasks.register('createJreleaserOutputDir') {
    doLast {
        def jreleaserDir = file("$buildDir/jreleaser")
        if (!jreleaserDir.exists()) {
            jreleaserDir.mkdirs()
        }
    }
}

// Ensure JReleaser runs after the staging and output directory are prepared
tasks.named('jreleaserRelease') {
    dependsOn prepareStaging
    dependsOn createJreleaserOutputDir
}

jreleaser {
    project {
        website = 'https://github.com/agoda-com/java-local-metrics'
        authors = ['Your Name']
        license = 'Apache-2.0'
        inceptionYear = '2023'
    }
    release {
        github {
            repoOwner = 'agoda-com'
            name = 'java-local-metrics'
            tagName = "v{{projectVersion}}"
            releaseName = "{{projectName}} {{projectVersion}}"
            changelog {
                formatted = "ALWAYS"
                format = "- {{commitShortHash}} {{commitTitle}}"
            }
        }
    }
    signing {
        active = 'always'
        armored = true
        setPublicKey(findProperty("signingPublicKey"))
        setSecretKey(findProperty("signingSecretKey"))
        setPassphrase(findProperty("signingPassword"))
    }
    deploy {
        maven {
            nexus2 {
                app {
                    active = "RELEASE"
                    url = 'https://s01.oss.sonatype.org/service/local'
                    setUsername(findProperty("nexus2Username")) 
                    setPassword(findProperty("nexus2Password")) 
                    closeRepository = true
                    releaseRepository = true
                    sign = true
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    stagingRepository(stagingDirectory.get().toString()) // Correct staging path
                }
            }
        }
    }
}
